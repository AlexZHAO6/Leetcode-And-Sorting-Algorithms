class LRUCache {
	int capacity;
	HashMap<Integer,Integer> map;
	LinkedList<Integer> list;
    public LRUCache(int capacity) {
    	this.capacity = capacity;
    	map = new HashMap<>();
    	list = new LinkedList<>();
    }
    
    public int get(int key) {
    	if(map.containsKey(key)) {
    		list.remove((Integer)key);
    		list.addLast(key);
    		return map.get(key);
    	}
    	
    	return -1;
    }
    
    public void put(int key, int value) {
    	if(map.containsKey(key)) {
    		list.remove((Integer)key);
    		list.addLast(key);
    		map.put(key, value);
    		return;
    	}
    	if(list.size() == capacity) {
    		map.remove(list.removeFirst());
    		list.addLast(key);
    		map.put(key, value);
    	}
    	else {
    		list.addLast(key);
    		map.put(key, value);
    	}
    }
}