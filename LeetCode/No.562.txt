    
    public int longestLine(int[][] M) {
    	int m = M.length;
    	if(m == 0)
    		return 0;
    	int n = M[0].length;
    	if(n == 0)
    		return 0;
    	
    	int res = 0;
    	
    	int[][] horzen = new int[m][n];
    	int[][] vector = new int[m][n];
    	int[][] topleft = new int[m][n];
    	int[][] topright = new int[m][n];
    	
    	for(int i = 0; i < m; i++) {
    		for(int j = 0; j < n; j++) {
    			if(M[i][j] == 0) {
    				horzen[i][j] = 0;
    				vector[i][j] = 0;
    				topleft[i][j] = 0;
    				topright[i][j] = 0;
    			}
    			else {
    				horzen[i][j] = j > 0 ? horzen[i][j-1] + 1: 1;
    				vector[i][j] = i > 0 ? vector[i-1][j] + 1 : 1;
    				topleft[i][j] = i > 0 && j > 0 ? topleft[i-1][j-1] + 1 : 1;
    				topright[i][j] = i > 0 && j < n-1 ? topright[i-1][j+1] + 1 : 1;
    				
    				res = Math.max(res, horzen[i][j]);
    				res = Math.max(res, vector[i][j]);
    				res = Math.max(res, topleft[i][j]);
    				res = Math.max(res, topright[i][j]);
    			}
    		}
    	}
    	
    	return res;
    	

    } //4个dp数组 分别表示上 左 左上 右上 的连续1