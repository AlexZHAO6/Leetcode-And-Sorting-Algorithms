    public List<List<Integer>> permute(int[] nums) {
    	List<Integer> path = new ArrayList<>();
    	List<List<Integer>> res = new ArrayList<>();
    	int len = nums.length;
    	
    	boolean[] used = new boolean[len];
    	
        dfs(res,path,len,used,nums,0);
        
        return res;

    }
    
    private void dfs(List<List<Integer>> res, List<Integer> path, int len, boolean[] used, int[] nums, int depth) {
    	if(depth == len) {
    		res.add(new ArrayList<>(path));
    		return;
    	}
    		
    	
    	for(int i = 0; i < len; i++) {
    		if(used[i])
    			continue;
    		
    		path.add(nums[i]);
    		used[i] = true;
    		dfs(res,path,len,used,nums,depth+1);
    		
    		used[i] = false;
    		path.remove(path.size()-1);
    	}
    	
    }