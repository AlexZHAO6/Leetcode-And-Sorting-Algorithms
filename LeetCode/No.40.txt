    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
    	List<List<Integer>> res = new ArrayList<>();
    	int len = candidates.length;
    	if(len == 0)
    		return res;
    	
    	LinkedList<Integer> path = new LinkedList<>();
    	Arrays.parallelSort(candidates);
    	
    	bfs(0,len,path,res,candidates,target);
    	
    	
    	return res;
    	
    }
    
    public void bfs(int start, int len, LinkedList<Integer> path, List<List<Integer>> res, int[] candidates, int rest) {
    	if(rest == 0) {
    		res.add(new ArrayList<>(path));
    		return;
    	}
    	
    	for(int i = start; i < len; i++) {
    		if(rest - candidates[i] < 0)
    			break;
    		
    		if(i > start && candidates[i] == candidates[i-1])
    			continue;
    		
    		path.add(candidates[i]);
    		bfs(i+1,len,path,res,candidates,rest-candidates[i]);
    		
    		
    		path.remove(path.size() - 1);
    	}
    	

    	
    }// bfs + 减枝