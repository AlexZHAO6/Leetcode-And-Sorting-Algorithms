class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
    	if(root == null)
    		return "[]";
    	
    	StringBuilder res = new StringBuilder("[");
    	Queue<TreeNode> q = new LinkedList<>();
    	q.add(root);
    	
    	while(!q.isEmpty()) {
    		TreeNode tmp = q.poll();
    		if(tmp != null) {
    			res.append(tmp.val + ",");
    			q.add(tmp.left);
    			q.add(tmp.right);
    			
    		}
    		else
    			res.append("null" + ",");
    		
    		
    	}
    	
    	res.append("]");
    	return res.toString();
    	
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
    	if(data.equals("[]"))
    		return null;
    	String[] val = data.substring(1, data.length()-1).split(",");
    	TreeNode root = new TreeNode(Integer.parseInt(val[0]));
    	
    	Queue<TreeNode> q = new LinkedList<>();
    	q.add(root);
    	int i = 1;
    	while(!q.isEmpty()) {
    		TreeNode tmp = q.poll();
    		
    		if(!val[i].equals("null")) {
    			tmp.left = new TreeNode(Integer.parseInt(val[i]));
    			q.add(tmp.left);
    		}
    		
    		i++;
    		

    		if(!val[i].equals("null")) {
    			tmp.right = new TreeNode(Integer.parseInt(val[i]));
    			q.add(tmp.right);
    		}
    			
    		i++;
    		
    	}
        
    	return root;
    }
} // 运用队列！